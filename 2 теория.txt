The Framework Class Library(FCL) является компонентом компании Microsoft .net Framework, первая реализация проекта Инфраструктура Общего Языка (CLI). Во многом так же, как Среда CLR реализует интерфейс командной строки Виртуальная Исполнительная Система (VES), FCL реализует основополагающий CLI стандартная библиотека.

int - примитив, доступный в компиляторе C#, в то время как Int32 является типом FCL и следовательно доступен для всех языков, соответствующих CLS.

Кроме Console.WriteLine() можно также использовать метод Console.Write(), он работает точно так же за тем исключением, что не осуществляет переход на следующую строку.

использование директивы using
импортирует все имена из заданного
пространства имён в окружающее
пространство имён

Clear : очистка консоли
•
WriteLine : вывод строки текста с переводом на новую
строку
•
Write : вывод строки текста
•
Read : считывание введенного символа в виде числового
кода данного символа . С помощью преобразования к типу
char мы можем получить введенный символ
•
ReadKey : считывание нажатой клавиши клавиатуры
ConsoleKeyInfo key= Console.ReadKey
•
ReadLine : считывание строки текста со входного потока

CLR требует, чтобы все объекты создавались
оператором new.

CLR требует, чтобы все объекты создавались
оператором new.

►
Microsoft.NET (.NET Framework ) программная
платформа. Содержит следующие основные
компоненты
CLR
Common Language Runtime общеязыковая
среда исполнения, виртуальная машина на которой
исполняются все приложения, работающие в среде
NET Реализация CLI VES компанией Microsoft
Компилятор JIT Just in Time
MSIL(После компиляции программы на C# (или другом языке) создается файл, который содержит особого рода псевдокод или байт-код (а не исполнительный файл, как было раньше). Этот псевдокод называется Microsoft Intermediate Language (MSIL) )


Microsoft IL реализация CLI CIL
компанией Microsoft
FCL

Framework Class Library реализация CLI
BCL компанией Microsoft Можно рассматривать, как
API CRL(соответствующая CLS
спецификации объектно ориентированная библиотека классов,
интерфейсов и системы типов (типов значений))

CLI разновидность текстового интерфейса(TUI) между человеком и компьютером, в котором инструкции компьютеру даются в основном путём ввода с клавиатуры текстовых строк

IL от англ. intermediate language — буквально «промежуточный язык»
Все компиляторы, поддерживающие платформу .NET, должны транслировать код с языков высокого уровня платформы .NET на язык CIL

JIT-компиляция (англ. Just-in-time compilation, компиляция «на лету»), динамическая компиляция (англ. dynamic translation) — технология увеличения производительности программных систем, использующих байт-код, путём компиляции байт-кода в машинный код или в другой формат непосредственно во время работы программы. Таким образом достигается высокая скорость выполнения по сравнению с интерпретируемым байт-кодом[1

CTS (общая система типов) представляет собой формальную спецификацию, в которой описано то, как должны быть определены типы для того, чтобы они могли обслуживаться в CLR-среде.

если строка ""рименять методы

Ключевое слово checked используется для явного включения проверки переполнения

Сборки – это файлы с расширениями *.dll или *.exe, которые содержат независимые от платформы .NET инструкции на промежуточном языке (Intermediate Language – IL), а также метаданные типов.

Приватные сборки
Это простейший тип сборок. Обычно они поставляются с определенным программным обеспечением и предназначены для применения только в его составе. Обычный сценарий получения приватной сборки — это когда приложение поставляется в виде исполняемой программы и множества библиотек, код которых может быть использован только этим приложением.

Разделяемые сборки
Назначение разделяемых сборок — служить библиотеками общего применения, которые могут использоваться любым другим приложением. Поскольку любое другое приложение может получить доступ к разделяемой сборке, возникает необходимость в некоторых предосторожностях, чтобы исключить описанные ниже риски.

Коллизия имен, когда разделяемая сборка, поставленная другой компанией, реализует типы с теми же именами, что используются в вашей сборке. Поскольку клиентский код теоретически может иметь доступ к двум таким сборкам одновременно, это может представлять серьезную проблему.

Риск того, что данная сборка будет перезаписана другой версией той же сборки, и новая версия окажется несовместимой с некоторым существующим клиентским кодом.

Однофайловые и многофайловые сборки

Если сборка предназначена для совместного использования несколькими при-
ложениями, ее нужно поместить в общеизвестный каталог, который среда CLR
должна автоматически проверять при обнаружении ссылки на сборку. Место,
где располагаются совместно используемые сборки, называют глобальным кэшем
сборок

Вы можете воспользоваться библиотекой Mono.Cecil (доступна так же через NuGet) и использовать ее для анализа сборок.

в MSCorLib.dll, сборке со строгим
именем.

10)сборка


Директива using используется в следующих трех целях.

Представляет тип значения, который можно присвоить null.

Оператор fixed задает указатель на управляемую переменную и "закрепляет" эту переменную во время выполнения оператора. Без fixed, указатели на перемещаемые управляемые переменные были бы мало полезны, так как при сборке мусора переменные переносились бы непредсказуемым образом

Объясните использование интерфейса IDisposable      Предоставляет механизм для освобождения неуправляемых ресурсов

Для разрешения использования типов в пространстве имен, чтобы не нужно было квалифицировать использование типа в этом пространстве имен:

Для разрешения доступа к статическим членам типа без необходимости квалификации доступа с помощью имени типа:

Чтобы создать псевдоним для пространства имен или типа. Это называется директивой псевдонима using.

типы: типы значений, ссылочный(object, string)

Примитивный тип - это несоставной тип данных, тоесть такие типы как int, double, boolean, single, byte и т.д., занимающие в памяти строго определенное количество байт.

при изменении строки string сохдаёт новую строку, стрингбилдер работает с одной