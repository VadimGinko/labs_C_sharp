1)git version

2)git config

3)git config --global user.name 'VadimGinko'

4)git config --global user.email 'ghimko2001@gmail.com'

5)git cofig --list -список параметров

6)git clone ссылка

7)Чтобы обойти это, я использовал следующие шаги

Создайте текстовый файл gitignore.txt
Откройте его в текстовом редакторе и добавьте свои правила, затем сохраните и закройте
Удерживайте SHIFT, щелкните правой кнопкой мыши папку, в которой вы находитесь, затем выберите « Открыть окно команд»
Затем переименуйте файл в командной строке, ren gitignore.txt .gitignore

8)git add .  добавление всех файлов(под присмотром git)

9) git restore --staged файл - удаление, если случайно add

10) git commit -a(зааддить всё) -m""(сообщение)(сдесь уже фиксируется состояние)

11)git push залить всё на сайт

12)git log --pretty=format:"%h - %an, %ar : %s"(-p разница в каждом из коммитов)

13)git diff --staged сравнить изменения с предыдущим коммитом

14)git reset --hard HEAD~

15)git reset --hard ссылка вернуться к нужному репу и изменить файлы на компе
			 --sort Head~
			 [--mixed] Head~
			 
16) git rm удаление файла из отслеживаемых(-f -принудительное удаление --cached удалить из индекса но оставить на компе)

17)$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend

18)Давайте последуем этому совету, и отменим индексирование файла CONTRIBUTING.md:
$ git reset HEAD CONTRIBUTING.md

19)git checkout -- файл
сброс к предыдущему сэйву

20)git remote список удалённых реаоз

21)Как вы только что узнали, для получения данных из удалённых проектов, следует выполнить:
$ git fetch [remote-name]

22)Отправка изменений в удаленный репозиторий (Push)
Когда вы хотите поделиться своими наработками, вам необходимо отправить (push) их в главный репозиторий. Команда для этого действия простая: git push [remote-name] [branch-name].

23)$ git tag -a v1.4 -m 'my version 1.4' аннотированные метки

24)git tag v1.4-lw легко весная метка

git checkout -b version2 v2.0.0
так можно перейти на метку

25)еперь слушайте внимательно. Это самая важная вещь, которую нужно запомнить о Git, если вы хотите, чтобы остаток процесса обучения прошёл гладко. У Git’а есть три основных состояния, в которых могут находиться ваши файлы: зафиксированное (committed), изменённое (modified) и подготовленное (staged). * Зафиксированный значит, что файл уже сохранён в вашей локальной базе. * К изменённым относятся файлы, которые поменялись, но ещё не были зафиксированы. * Подготовленные файлы — это изменённые файлы, отмеченные для включения в следующий коммит.

26)Новая ветка 
$ git branch testing

27)Переключение веток
$ git checkout testing

 выполнить слияние (merge) с основной веткой для включения в продукт. Это делается командой git merge:
 Для удаления ветки выполните команду git branch с параметром -d:

$ git branch -d hotfix

Команда git branch делает несколько больше, чем просто создаёт и удаляет ветки. При запуске без параметров, вы получите простой список имеющихся у вас веток:

$ git branch
  iss53
* master
  testing
  
 Удаление веток на удалённом сервере $ git push origin --delete serverfix

28)decorate --graph --all выдаст историю ваших коммитов и покажет, где находятся указатели ваших веток, и как ветвилась история проекта.

29)$ git init. Эта команда создаёт в текущем каталоге новый подкаталог с именем .git
  git remote add or git://github.com/paulboone/ticgit.git
 git pull or master( файлы из репа скопировались на комп)
 git add .
git commit -m"qqqq"
git push or master

 





)$ git push pb master -f(игнорирует ошибку)


git revert — отмена изменений, произведенных в прошлом отдельным коммитом

git merge 1234 по порядку ка и были сделанны коммиты
git rebase 42 13 


3 состояния зафиксированном, изменённом и подготовленном.

git pull — это, по сути, команда git fetch, после которой сразу же следует git merge
git fetch получает изменения с сервера и сохраняет их в каталог refs/remotes/. Это никак не влияет на локальные ветки и текущие изменения. А git merge уже вливает все эти изменения в локальную копию.
